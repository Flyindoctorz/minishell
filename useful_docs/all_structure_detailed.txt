# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    all_structure_detailed.txt                         :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: cgelgon <cgelgon@student.42.fr>            +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/01/29 10:01:51 by cgelgon           #+#    #+#              #
#    Updated: 2025/01/29 14:30:01 by cgelgon          ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

typedef struct s_data {
    t_env       *env;          // Liste des variables d'environnement
    t_cmd_list  *cmd_list;     // Liste des commandes à exécuter
    t_parsing   *parsing;      // État actuel du parsing
    char        *input;        // Input brut de l'utilisateur
    int         exit_status;   // Status de sortie de la dernière commande
} t_data;

/* Structure pour l'analyse lexicale */
typedef struct s_lexer {
    char        *input;        // Input en cours d'analyse
    int         position;      // Position actuelle dans l'input
    t_token     *current;      // Token en cours de traitement
    t_data      *data;        // Données globales
} t_lexer;

/* Structure représentant un token */
/* Modification de la structure token pour supporter l'expansion */
typedef struct s_token {
    int         type;
    char        *value;
    int         expanded;    // Flag indiquant si le token a déjà été expandé
    t_expand    *exp_data;  // Données d'expansion pour ce token
    t_token     *next;
    t_token     *prev;
} t_token;


/* Structure pour le parsing */
/* Ajout dans la structure parsing pour gérer l'expansion */
typedef struct s_parsing {
    t_token     *tokens;
    t_heredoc   *heredocs;
    int         token_count;
    int         current_pos;
    t_data      *data;
    t_expand    *expand_state;  // État actuel de l'expansion
} t_parsing;

typedef struct s_expand {
    char    *original;       // Contenu original avant expansion
    char    *expanded;       // Contenu après expansion
    int     in_quotes;       // État des quotes (0: non, 1: simple, 2: double)
    int     in_heredoc;      // Flag si dans un heredoc
    t_env   *env_list;       // Accès aux variables d'environnement
} t_expand;

/* Structure pour la liste des commandes */
typedef struct s_cmd_list {
    char        **args;        // Arguments de la commande
    char        **redirections; // Liste des redirections
    int         *redir_types;  // Types des redirections
    t_cmd_list  *next;        // Commande suivante (après pipe)
    t_cmd_list  *prev;        // Commande précédente
} t_cmd_list;

/* Structure pour les variables d'environnement */
typedef struct s_env {
    char        *key;          // Nom de la variable
    char        *value;        // Valeur de la variable
    t_env       *next;        // Variable suivante
} t_env;

/* Structure pour la gestion des heredocs */
typedef struct s_heredoc {
    char        *delimiter;    // Délimiteur du heredoc
    int         fd;           // File descriptor
    t_heredoc   *next;        // Heredoc suivant
} t_heredoc;

