# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    expand_doc.txt                                     :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: cgelgon <cgelgon@student.42.fr>            +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/01/29 09:57:34 by cgelgon           #+#    #+#              #
#    Updated: 2025/01/29 09:58:28 by cgelgon          ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

typedef struct s_expand
{
    char    *original;       // Contenu original avant expansion
    char    *expanded;       // Contenu après expansion
    int     in_quotes;       // État des quotes (0: non, 1: simple, 2: double)
    int     in_heredoc;      // Flag si dans un heredoc
    t_env   *env_list;       // Accès aux variables d'environnement
}

# Documentation sur l'Expansion dans un Shell

## Introduction

L'expansion (ou développement) est le processus par lequel le shell transforme et interprète certains caractères spéciaux avant l'exécution d'une commande. Ce processus est crucial pour la flexibilité et la puissance du shell.

## Types d'Expansion

### 1. Expansion des Variables (Parameter Expansion)

L'expansion des variables permet de récupérer la valeur associée à un nom de variable.

Syntaxes basiques :
```bash
$NAME       # Expansion simple
${NAME}     # Expansion avec accolades
```

Cas particuliers :
```bash
$?          # Status de sortie de la dernière commande
$$          # PID du shell actuel
$0          # Nom du shell ou du script
$1-$9       # Arguments positionnels
```

Comportements spéciaux :
```bash
${NAME:-default}     # Utilise 'default' si NAME n'existe pas ou est vide
${NAME:=default}     # Assigne 'default' à NAME si elle n'existe pas ou est vide
${NAME:?message}     # Affiche 'message' et sort si NAME n'existe pas ou est vide
${NAME:+value}       # Utilise 'value' si NAME existe et n'est pas vide
```

### 2. Expansion des Guillemets

Les guillemets affectent l'interprétation des caractères spéciaux :

#### Guillemets simples (')
- Désactivent toute expansion
- Préservent le texte littéralement
```bash
echo '$HOME'     # Affiche: $HOME
```

#### Guillemets doubles (")
- Permettent l'expansion des variables
- Préservent les espaces
- Désactivent certains caractères spéciaux
```bash
echo "$HOME"     # Affiche: /home/user
```

### 3. Expansion dans les Heredocs

Les heredocs suivent des règles spéciales :

```bash
# Heredoc sans quotes - expansion activée
cat << EOF
$HOME
EOF

# Heredoc avec quotes - expansion désactivée
cat << 'EOF'
$HOME
EOF
```

## Ordre d'Expansion

1. Expansion des accolades
2. Expansion des tildes (~)
3. Expansion des paramètres et variables
4. Substitution de commandes
5. Expansion arithmétique
6. Séparation des mots
7. Expansion des chemins

## Implémentation

### Structure de Données

```c
typedef struct s_expand {
    char    *original;       // Contenu avant expansion
    char    *expanded;       // Contenu après expansion
    int     quote_state;     // État des quotes
    int     heredoc_mode;    // Mode heredoc
    t_env   *env;           // Variables d'environnement
} t_expand;
```

### Processus d'Expansion

1. Tokenisation initiale
2. Identification des zones d'expansion
3. Application des règles selon le contexte
4. Fusion des résultats

### Gestion des Erreurs

Situations à gérer :
- Variables non définies
- Syntaxe invalide
- Quotes non fermées
- Expansion récursive

## Exemples de Cas Complexes

### 1. Imbrication de Variables
```bash
${NAME${SUFFIX}}    # Expansion imbriquée
```

### 2. Quotes Multiples
```bash
echo "Les guillemets '$VAR' dans les guillemets"
```

### 3. Heredoc avec Expansion Conditionnelle
```bash
cat << ${DELIMITER:-EOF}
$VAR1
'$VAR2'
"$VAR3"
EOF
```

## Bonnes Pratiques

1. Toujours vérifier le contexte d'expansion
2. Gérer les cas d'erreur de manière gracieuse
3. Préserver l'état original pour le débogage
4. Documenter les cas spéciaux
5. Utiliser des tests unitaires pour les cas limites