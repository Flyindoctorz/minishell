# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    ROADMAP.txt                                        :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: cgelgon <cgelgon@student.42.fr>            +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/02/04 16:07:44 by cgelgon           #+#    #+#              #
#    Updated: 2025/02/26 11:52:01 by cgelgon          ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

    Fonctions de base (déjà fait)

    ✓ init_lexer
    ✓ advance_lexer
    ✓ look_forward
    ✓ structures de base

  

void    skip_whitespace(t_lexer *lexer);
t_token *create_token(t_token_type type, char *value);  // Fonction helper
bool    is_whitespace(char c);  // Helper pour skip_whitespace
bool    is_delimiter(char c);   // Helper pour read_word

    Fonctions de lecture (par ordre de complexité)

c

t_token *read_word(t_lexer *lexer);      // Base pour les commandes/arguments
t_token *read_operator(t_lexer *lexer);   // Pour |, >, >>, <, 



t_token *read_env_var(t_lexer *lexer);    // Pour $
t_token *read_quotes(t_lexer *lexer);     // Pour ' et " (FAIT)

    Fonction principale et validation

c

t_token *next_token(t_lexer *lexer);
bool    validate_token_sequence(t_token *token_list);

    Interface publique et gestion d'erreurs

c

t_token *lexer_tokenize(char *input, t_data *data);

Suggestions d'optimisation :

    Ajouter une gestion d'erreur cohérente à chaque étape
    Créer des tests unitaires pour chaque fonction
    Potentiellement ajouter :

c

bool    is_special_char(char c);  // Pour identifier rapidement les caractères spéciaux
bool    is_quote(char c);         // Pour identifier rapidement les quotes
char    *extract_word(t_lexer *lexer, int start, int end);  // Helper pour éviter la duplication de code

a trouver ou et comment faire :
shrink les token de facon  a ce que la redirection englobe le token suivant et le supprime
ls -lra